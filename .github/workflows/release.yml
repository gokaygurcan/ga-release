name: Release

on:
  push:
    branches:
      - main
  release:
    types:
      - published
      - unpublished
      - created
      - edited
      - deleted
      - prereleased
      - released

env:
  NODE_VERSION: '10.x'

defaults:
  run:
    shell: bash

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - id: checkout
      name: Checkout
      uses: actions/checkout@v2

    - id: sanity-check
      name: Sanity check
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
        JOB_CONTEXT: ${{ toJson(job) }}
        STEPS_CONTEXT: ${{ toJson(steps) }}
        RUNNER_CONTEXT: ${{ toJson(runner) }}
        STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        MATRIX_CONTEXT: ${{ toJson(matrix) }}
      run: |
        printenv
        echo "$PATH"
        echo "$GITHUB_CONTEXT"
        echo "$JOB_CONTEXT"
        echo "$STEPS_CONTEXT"
        echo "$RUNNER_CONTEXT"
        echo "$STRATEGY_CONTEXT"
        echo "$MATRIX_CONTEXT"
        which node
        node --version
        which npm
        npm --version
        which grunt
        grunt --version
        which make
        make --version
        which jq
        jq --version
        pwd
        ls -lah .

    - id: cache-dependencies
      name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
          **/.cache
        key: node-modules-${{ hashFiles('package.json') }}

    - id: install-dependencies
      name: Install dependencies
      if: |
        (steps.cache-dependencies.outputs.cache-hit != 'true')
      run: |
        npm install

  tag:
    name: Tag
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push'
    needs: [ setup ]
    steps:
    - id: setup-node
      name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ env.NODE_VERSION }}

    - id: checkout
      name: Checkout
      uses: actions/checkout@v2

    - id: cache-dependencies
      name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: |
          **/node_modules
          **/.cache
        key: node-modules-${{ hashFiles('package.json') }}

    - id: identity
      name: Identity
      run: |
        git config --global user.email "actions@github.com"
        git config --global user.name "GitHub Actions"
        git config --list

    - id: bump
      name: Bump
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.CUSTOM_GITHUB_TOKEN }}
        debug: true
        result-encoding: string
        script: |
          const semver = require('semver');
          
          const owner = context.payload.repository.owner.login;
          const repo = context.payload.repository.name;
          
          const tags = await github.repos.listTags({ owner, repo, per_page: 1, page: 1 }).catch(console.log);
          const releases = await github.repos.listReleases({ owner, repo, per_page: 1, page: 1 }).catch(console.log);
          
          const lastTag = tags.data[0].name;
          const lastRelease = releases.data[0].tag_name;
          const lastVersion = lastTag.split('.').slice(0, -1).join('.');
          const version = `${(lastTag === lastRelease) ? 'v' + semver.inc(lastVersion, 'patch') : lastVersion}.${context.runNumber}`;
          
          core.info(`version: ${version}`);
          core.setOutput('version', version);
          core.setOutput('last-tag', lastTag);
          
          return version;

    - id: push-tag
      name: Push tag
      env:
        SHA: ${{ github.sha }}
        LAST_TAG: ${{ steps.bump.outputs.last-tag }}
        VERSION: ${{ steps.bump.outputs.version }}
      run: |
        echo "$VERSION"
        
        # push new tag
        git tag -a $VERSION -m '$(git log $LAST_TAG...$SHA --oneline --no-merges --pretty="format: %s (%al) [%h]")'
        git push origin $VERSIONs

  release:
    name: Release
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'release'
    needs: [ setup ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-published:
    name: Release > published
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'published'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-unpublished:
    name: Release > unpublished
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'unpublished'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-created:
    name: Release > created
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'created'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-edited:
    name: Release > edited
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'edited'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-deleted:
    name: Release > deleted
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'deleted'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-prereleased:
    name: Release > prereleased
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'prereleased'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"

  release-released:
    name: Release > released
    runs-on: ubuntu-latest
    if: |
      github.event.action == 'released'
    needs: [ tag, release ]
    steps:
    - id: print-context
      name: Print context
      env:
        GITHUB_CONTEXT: ${{ toJson(github) }}
      run: |
        echo "$GITHUB_CONTEXT"
